apiVersion: apps/v1
kind: Deployment
metadata:
  name: insightink-server-deployment
  labels:
    app: insightink-server
spec:
  replicas: 3 # Number of pod replicas
  selector:
    matchLabels:
      app: insightink-server
  template:
    metadata:
      labels:
        app: insightink-server
    spec:
      imagePullSecrets:
        - name: acr-auth # Reference to the secret created
      containers:
        - name: insightink-server-container
          image: appacr.azurecr.io/insightink-server:latest # Replace with your Docker image
          ports:
            - containerPort: 3000 # Port that your Node.js app is running on
          env:
            - name: NODE_ENV
              value: "production" # Set Node.js environment to production
            - name: DATABASE_URI
              value: "mongodb://cosmosdb-account-58075:SP4nnZSNDyEAPzaQ98B2LxrXDV9fsQJ3VEJ8wMjl6DyWLVIejVDaX35kAtiddqTOwAyxKrSJDsj5ACDbeM5znw==@cosmosdb-account-58075.mongo.cosmos.azure.com:10255/?ssl=true&replicaSet=globaldb&retrywrites=false&maxIdleTimeMS=120000&appName=@cosmosdb-account-58075@" # Example environment variable for database connection
          resources:
            limits:
              memory: "512Mi"
              cpu: "500m"
            requests:
              memory: "256Mi"
              cpu: "250m"
---
apiVersion: v1
kind: Service
metadata:
  name: insightink-server-service
spec:
  selector:
    app: insightink-server
  ports:
    - protocol: TCP
      port: 80 # Port exposed by the service
      targetPort: 3000 # Port exposed by the container (from the containerPort)
  type: LoadBalancer # Expose the service via a load balancer (use NodePort for internal access)
